# 用 自定义的 Realm 就是代替这个 配置文件的，它就直接是由数据库控制了。

# 每次请求时，都会经过 shiro 来过滤。
[main]
# 如果 身分验证没有通过的，就跳转到 login 这个页面去
authc.loginUrl=/login

# 角色认证，没有这个角色就跳转到 没有权限的页面去。角色也是下面配置的。
# 认证未通过的话，就跳转到 unauthorized.jsp 这个页面去。
roles.unauthorizedUrl=/unauthorized.jsp

# 权限认证，和 角色差不多
perms.unauthorizedUrl=/unauthorized.jsp


# 用户有哪些，及它们的角色 权限，  不要了因为直接从数据库里面读取。
# [users]
# java1234=123456,admin
# jack=123,teacher
# marry=234
# json=345

# 角色，如：这个 admin 这个用户 拥有用户这个角色所有的权限
# [roles]
# admin=user:*
# teacher=student:*


# 配置 自定义的Realm ****************************************************
myRealm=com.tz.shiro_06.realm.MyRealm
securityManager.realms=$myRealm


# urlS 是多个url，执行某个url时，需要什么权限。anon这个代表是不需要什么权限的，因为访问登录页面是。
[urls]
/login=anon
# authc需要加入 身分验证。所以你直接访问 admin这个URL时，会被跳转到 login页面去。
/admin=authc 

# 请求这个URL 时，必须要有 teacher这个角色的用户才能访问
/student=roles[teacher]
# 访问这个URL时，必须要有 "user:create" 这个权限才能访问。
/teacher=perms["user:create"]



# 就是搞清这个 URL 是如何配置的，和上面哪个登录拦截。


#  Url 匹配方式
#  ? 匹配一个字符/admin? 可以匹配/admin1 /admin2 但是不能匹配/admin12 /admin
#  * 匹配零个或者一个或者多个字符/admin* 可以匹配/admin /admin1 /admin12 但是不能匹配/admin/abc
#  ** 匹配零个或者多个路径/admin/** 可以匹配/admin /admin/a /admin/a/b




# 要看，你是用哪个 用户登录的，这个用户拥有哪些角色，这些角色拥有哪些权限。
# 注：有时必须先进行了，身分验证，然后才能 验证 角色，权限这些。所以就是你必须要先登录。
# shiro 验证的顺序是：身分验证，角色验证，权限验证。